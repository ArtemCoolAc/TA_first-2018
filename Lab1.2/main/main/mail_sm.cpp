//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : mail.sm
//
#include "stdafx.h"
#include "mail.h"
#include "mail_sm.h"

using namespace statemap;

// Static class declarations.
MainMap_Error MainMap::Error("MainMap::Error", 0);
MainMap_M0 MainMap::M0("MainMap::M0", 1);
MainMap_M1 MainMap::M1("MainMap::M1", 2);
MainMap_M2 MainMap::M2("MainMap::M2", 3);
MainMap_M3 MainMap::M3("MainMap::M3", 4);
MainMap_M4 MainMap::M4("MainMap::M4", 5);
MainMap_M5 MainMap::M5("MainMap::M5", 6);
MainMap_M6 MainMap::M6("MainMap::M6", 7);
MainMap_NameS MainMap::NameS("MainMap::NameS", 8);
MainMap_Name MainMap::Name("MainMap::Name", 9);
MainMap_ServerS MainMap::ServerS("MainMap::ServerS", 10);
MainMap_Server MainMap::Server("MainMap::Server", 11);
MainMap_ZoneS MainMap::ZoneS("MainMap::ZoneS", 12);
MainMap_Zone MainMap::Zone("MainMap::Zone", 13);
MainMap_S0 MainMap::S0("MainMap::S0", 14);
MainMap_S1 MainMap::S1("MainMap::S1", 15);
MainMap_S2 MainMap::S2("MainMap::S2", 16);
MainMap_S3 MainMap::S3("MainMap::S3", 17);
MainMap_S4 MainMap::S4("MainMap::S4", 18);
MainMap_S5 MainMap::S5("MainMap::S5", 19);
MainMap_S6 MainMap::S6("MainMap::S6", 20);
MainMap_S7 MainMap::S7("MainMap::S7", 21);
MainMap_Text MainMap::Text("MainMap::Text", 22);

void MailState::EOS(mailContext& context)
{
    Default(context);
}

void MailState::Unknown(mailContext& context)
{
    Default(context);
}

void MailState::at(mailContext& context)
{
    Default(context);
}

void MailState::digit(mailContext& context, char dig)
{
    Default(context);
}

void MailState::eq(mailContext& context)
{
    Default(context);
}

void MailState::letter(mailContext& context, char let)
{
    Default(context);
}

void MailState::point(mailContext& context)
{
    Default(context);
}

void MailState::qmark(mailContext& context)
{
    Default(context);
}

void MailState::reset(mailContext& context)
{
    Default(context);
}

void MailState::tdot(mailContext& context)
{
    Default(context);
}

void MailState::Default(mailContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void MainMap_Default::reset(mailContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::M0);
    context.getState().Entry(context);

}

void MainMap_Default::EOS(mailContext& context)
{
    Mail& ctxt = context.getOwner();

    MailState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_Default::Unknown(mailContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::Error);
    context.getState().Entry(context);

}

void MainMap_Default::Default(mailContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::Error);
    context.getState().Entry(context);

}

void MainMap_M0::letter(mailContext& context, char let)
{

    if (let == 'm'||let == 'M')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::M1);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_M1::letter(mailContext& context, char let)
{

    if (let == 'a'||let == 'A')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::M2);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_M2::letter(mailContext& context, char let)
{

    if (let == 'i'||let == 'I')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::M3);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_M3::letter(mailContext& context, char let)
{

    if (let == 'l'||let == 'L')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::M4);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_M4::letter(mailContext& context, char let)
{

    if (let == 't'||let == 'T')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::M5);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_M5::letter(mailContext& context, char let)
{

    if (let == 'o'||let == 'O')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::M6);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_M6::tdot(mailContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::NameS);
    context.getState().Entry(context);

}

void MainMap_NameS::digit(mailContext& context, char dig)
{
    Mail& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.NPush(dig);
        context.setState(MainMap::Name);
    }
    catch (...)
    {
        context.setState(MainMap::Name);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_NameS::letter(mailContext& context, char let)
{
    Mail& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.NPush(let);
        context.setState(MainMap::Name);
    }
    catch (...)
    {
        context.setState(MainMap::Name);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Name::at(mailContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::ServerS);
    context.getState().Entry(context);

}

void MainMap_Name::digit(mailContext& context, char dig)
{
    Mail& ctxt = context.getOwner();

    MailState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.NPush(dig);
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_Name::letter(mailContext& context, char let)
{
    Mail& ctxt = context.getOwner();

    MailState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.NPush(let);
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_ServerS::digit(mailContext& context, char dig)
{

    context.getState().Exit(context);
    context.setState(MainMap::Server);
    context.getState().Entry(context);

}

void MainMap_ServerS::letter(mailContext& context, char let)
{

    context.getState().Exit(context);
    context.setState(MainMap::Server);
    context.getState().Entry(context);

}

void MainMap_Server::digit(mailContext& context, char dig)
{


}

void MainMap_Server::letter(mailContext& context, char let)
{


}

void MainMap_Server::point(mailContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::ZoneS);
    context.getState().Entry(context);

}

void MainMap_ZoneS::letter(mailContext& context, char let)
{

    context.getState().Exit(context);
    context.setState(MainMap::Zone);
    context.getState().Entry(context);

}

void MainMap_Zone::letter(mailContext& context, char let)
{


}

void MainMap_Zone::qmark(mailContext& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::S0);
    context.getState().Entry(context);

}

void MainMap_S0::letter(mailContext& context, char let)
{

    if (let == 's'||let == 'S')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::S1);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_S1::letter(mailContext& context, char let)
{

    if (let == 'u'||let == 'U')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::S2);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_S2::letter(mailContext& context, char let)
{

    if (let == 'b'||let == 'B')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::S3);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_S3::letter(mailContext& context, char let)
{

    if (let == 'j'||let == 'J')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::S4);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_S4::letter(mailContext& context, char let)
{

    if (let == 'e'||let == 'E')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::S5);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_S5::letter(mailContext& context, char let)
{

    if (let == 'c'||let == 'C')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::S6);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_S6::letter(mailContext& context, char let)
{

    if (let == 't'||let == 'T')
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::S7);
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_S7::eq(mailContext& context)
{
    Mail& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.TextR();
        context.setState(MainMap::Text);
    }
    catch (...)
    {
        context.setState(MainMap::Text);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Text::EOS(mailContext& context)
{
    Mail& ctxt = context.getOwner();

    MailState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_Text::digit(mailContext& context, char dig)
{
    Mail& ctxt = context.getOwner();

    if (ctxt.TextL(64))
    {
        MailState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.TextLInc();
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         MainMap_Default::digit(context, dig);
    }

}

void MainMap_Text::letter(mailContext& context, char let)
{
    Mail& ctxt = context.getOwner();

    if (ctxt.TextL(64))
    {
        MailState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.TextLInc();
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
