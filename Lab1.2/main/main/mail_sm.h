//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : mail.sm
//

#ifndef MAIL_SM_H
#define MAIL_SM_H


#define SMC_USES_IOSTREAMS

#include "statemap.h"

// Forward declarations.
class MainMap;
class MainMap_Error;
class MainMap_M0;
class MainMap_M1;
class MainMap_M2;
class MainMap_M3;
class MainMap_M4;
class MainMap_M5;
class MainMap_M6;
class MainMap_NameS;
class MainMap_Name;
class MainMap_ServerS;
class MainMap_Server;
class MainMap_ZoneS;
class MainMap_Zone;
class MainMap_S0;
class MainMap_S1;
class MainMap_S2;
class MainMap_S3;
class MainMap_S4;
class MainMap_S5;
class MainMap_S6;
class MainMap_S7;
class MainMap_Text;
class MainMap_Default;
class MailState;
class mailContext;
class Mail;

class MailState :
    public statemap::State
{
public:

    MailState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(mailContext&) {};
    virtual void Exit(mailContext&) {};

    virtual void EOS(mailContext& context);
    virtual void Unknown(mailContext& context);
    virtual void at(mailContext& context);
    virtual void digit(mailContext& context, char dig);
    virtual void eq(mailContext& context);
    virtual void letter(mailContext& context, char let);
    virtual void point(mailContext& context);
    virtual void qmark(mailContext& context);
    virtual void reset(mailContext& context);
    virtual void tdot(mailContext& context);

protected:

    virtual void Default(mailContext& context);
};

class MainMap
{
public:

    static MainMap_Error Error;
    static MainMap_M0 M0;
    static MainMap_M1 M1;
    static MainMap_M2 M2;
    static MainMap_M3 M3;
    static MainMap_M4 M4;
    static MainMap_M5 M5;
    static MainMap_M6 M6;
    static MainMap_NameS NameS;
    static MainMap_Name Name;
    static MainMap_ServerS ServerS;
    static MainMap_Server Server;
    static MainMap_ZoneS ZoneS;
    static MainMap_Zone Zone;
    static MainMap_S0 S0;
    static MainMap_S1 S1;
    static MainMap_S2 S2;
    static MainMap_S3 S3;
    static MainMap_S4 S4;
    static MainMap_S5 S5;
    static MainMap_S6 S6;
    static MainMap_S7 S7;
    static MainMap_Text Text;
};

class MainMap_Default :
    public MailState
{
public:

    MainMap_Default(const char * const name, const int stateId)
    : MailState(name, stateId)
    {};

    virtual void reset(mailContext& context);
    virtual void EOS(mailContext& context);
    virtual void Unknown(mailContext& context);
    virtual void Default(mailContext& context);
};

class MainMap_Error :
    public MainMap_Default
{
public:
    MainMap_Error(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

};

class MainMap_M0 :
    public MainMap_Default
{
public:
    MainMap_M0(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_M1 :
    public MainMap_Default
{
public:
    MainMap_M1(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_M2 :
    public MainMap_Default
{
public:
    MainMap_M2(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_M3 :
    public MainMap_Default
{
public:
    MainMap_M3(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_M4 :
    public MainMap_Default
{
public:
    MainMap_M4(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_M5 :
    public MainMap_Default
{
public:
    MainMap_M5(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_M6 :
    public MainMap_Default
{
public:
    MainMap_M6(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void tdot(mailContext& context);
};

class MainMap_NameS :
    public MainMap_Default
{
public:
    MainMap_NameS(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void digit(mailContext& context, char dig);
    virtual void letter(mailContext& context, char let);
};

class MainMap_Name :
    public MainMap_Default
{
public:
    MainMap_Name(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void at(mailContext& context);
    virtual void digit(mailContext& context, char dig);
    virtual void letter(mailContext& context, char let);
};

class MainMap_ServerS :
    public MainMap_Default
{
public:
    MainMap_ServerS(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void digit(mailContext& context, char dig);
    virtual void letter(mailContext& context, char let);
};

class MainMap_Server :
    public MainMap_Default
{
public:
    MainMap_Server(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void digit(mailContext& context, char dig);
    virtual void letter(mailContext& context, char let);
    virtual void point(mailContext& context);
};

class MainMap_ZoneS :
    public MainMap_Default
{
public:
    MainMap_ZoneS(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_Zone :
    public MainMap_Default
{
public:
    MainMap_Zone(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
    virtual void qmark(mailContext& context);
};

class MainMap_S0 :
    public MainMap_Default
{
public:
    MainMap_S0(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_S1 :
    public MainMap_Default
{
public:
    MainMap_S1(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_S2 :
    public MainMap_Default
{
public:
    MainMap_S2(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_S3 :
    public MainMap_Default
{
public:
    MainMap_S3(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_S4 :
    public MainMap_Default
{
public:
    MainMap_S4(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_S5 :
    public MainMap_Default
{
public:
    MainMap_S5(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_S6 :
    public MainMap_Default
{
public:
    MainMap_S6(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void letter(mailContext& context, char let);
};

class MainMap_S7 :
    public MainMap_Default
{
public:
    MainMap_S7(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void eq(mailContext& context);
};

class MainMap_Text :
    public MainMap_Default
{
public:
    MainMap_Text(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void EOS(mailContext& context);
    virtual void digit(mailContext& context, char dig);
    virtual void letter(mailContext& context, char let);
};

class mailContext :
    public statemap::FSMContext
{
public:

    explicit mailContext(Mail& owner)
    : FSMContext(MainMap::M0),
      _owner(owner)
    {};

    mailContext(Mail& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline Mail& getOwner()
    {
        return (_owner);
    };

    inline MailState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<MailState&>(*_state);
    };

    inline void EOS()
    {
        getState().EOS(*this);
    };

    inline void Unknown()
    {
        getState().Unknown(*this);
    };

    inline void at()
    {
        getState().at(*this);
    };

    inline void digit(char dig)
    {
        getState().digit(*this, dig);
    };

    inline void eq()
    {
        getState().eq(*this);
    };

    inline void letter(char let)
    {
        getState().letter(*this, let);
    };

    inline void point()
    {
        getState().point(*this);
    };

    inline void qmark()
    {
        getState().qmark(*this);
    };

    inline void reset()
    {
        getState().reset(*this);
    };

    inline void tdot()
    {
        getState().tdot(*this);
    };

private:
    Mail& _owner;
};


#endif // MAIL_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
